// Reglas de seguridad para Firestore - Mi Granja 2
// Basado en el código del repo (colecciones: farms, animals, breedingRecords,
// reminders, weightRecords, farmInvitations, users y opcionalmente farmAreas).
// IMPORTANTE: Para validar membresía desde reglas, mantén en cada farm:
// - collaboratorsIds: array de UIDs de colaboradores
// - collaboratorsEmails: array de emails de colaboradores
// Además de ownerId. Si no existen hoy, añádelos al crear/editar colaboradores.

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- helpers ---
    function isSignedIn() { return request.auth != null; }

    // Admin por email (usado por pantallas de administración)
    function isAdmin() {
      return isSignedIn() && request.auth.token.email in [
        'admin@migranja.com',
        'zarza@admin.com'
      ];
    }

    // Owner de la granja
    function isOwnerOfFarm(farmId) {
      return isSignedIn() &&
        get(/databases/$(database)/documents/farms/$(farmId)).data.ownerId == request.auth.uid;
    }

    // Miembro u owner de la granja
    function isFarmMemberOrOwner(farmId) {
      return isSignedIn() && (
        isOwnerOfFarm(farmId)
        || request.auth.uid in (get(/databases/$(database)/documents/farms/$(farmId)).data.collaboratorsIds || [])
        || request.auth.token.email in (get(/databases/$(database)/documents/farms/$(farmId)).data.collaboratorsEmails || [])
      );
    }

    // Validaciones comunes de meta-datos (creación/actualización desde cliente)
    function validTimestamps() {
      return request.resource.data.createdAt is timestamp && request.resource.data.updatedAt is timestamp;
    }

    // --- Farms ---
    match /farms/{farmId} {
      allow read: if isSignedIn() && (isAdmin() || isFarmMemberOrOwner(farmId));

      allow create: if isSignedIn()
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.name is string
        && validTimestamps();

      // Evitar cambio de ownerId por cliente
      allow update: if isSignedIn() && (isAdmin() || isFarmMemberOrOwner(farmId))
        && request.resource.data.ownerId == resource.data.ownerId;

      allow delete: if isSignedIn() && (isAdmin() || isOwnerOfFarm(farmId));
    }

    // --- Farm invitations ---
    match /farmInvitations/{invId} {
      // Crear invitación: solo el owner
      allow create: if isSignedIn()
        && request.resource.data.farmId is string
        && isOwnerOfFarm(request.resource.data.farmId)
        && request.resource.data.email is string
        && request.resource.data.status == 'pending'
        && validTimestamps();

      // Leer: owner, invitado por email o usuario enlazado (userId), o admin
      allow read: if isSignedIn() && (
        isAdmin()
        || isOwnerOfFarm(resource.data.farmId)
        || request.auth.token.email == resource.data.email
        || request.auth.uid == (resource.data.userId || '')
      );

      // Actualizar: invitado puede aceptar/rechazar; owner o admin pueden revocar/editar
      allow update: if isSignedIn() && (
        (request.auth.token.email == resource.data.email && request.resource.data.status in ['accepted','rejected'])
        || isOwnerOfFarm(resource.data.farmId)
        || isAdmin()
      );

      allow delete: if isSignedIn() && (isOwnerOfFarm(resource.data.farmId) || isAdmin());
    }

    // --- Animals ---
    match /animals/{animalId} {
      allow read: if isSignedIn() && (isAdmin() ||
        resource.data.farmerId == request.auth.uid || isFarmMemberOrOwner(resource.data.farmId));

      allow create: if isSignedIn() && (
        request.resource.data.farmerId == request.auth.uid
        && request.resource.data.farmId is string
        && isFarmMemberOrOwner(request.resource.data.farmId)
        && validTimestamps()
      );

      allow update, delete: if isSignedIn() && (isAdmin() ||
        resource.data.farmerId == request.auth.uid || isFarmMemberOrOwner(resource.data.farmId));
    }

    // --- Breeding records ---
    match /breedingRecords/{recordId} {
      allow read: if isSignedIn() && (isAdmin() ||
        resource.data.farmerId == request.auth.uid || isFarmMemberOrOwner(resource.data.farmId));

      allow create: if isSignedIn() && (
        request.resource.data.farmerId == request.auth.uid
        && request.resource.data.farmId is string
        && isFarmMemberOrOwner(request.resource.data.farmId)
        && validTimestamps()
      );

      allow update, delete: if isSignedIn() && (isAdmin() ||
        resource.data.farmerId == request.auth.uid || isFarmMemberOrOwner(resource.data.farmId));
    }

    // --- Reminders ---
    match /reminders/{reminderId} {
      allow read: if isSignedIn() && (isAdmin() ||
        resource.data.farmerId == request.auth.uid || isFarmMemberOrOwner(resource.data.farmId));

      allow create: if isSignedIn() && (
        request.resource.data.farmerId == request.auth.uid
        && request.resource.data.farmId is string
        && isFarmMemberOrOwner(request.resource.data.farmId)
        && validTimestamps()
      );

      allow update, delete: if isSignedIn() && (isAdmin() ||
        resource.data.farmerId == request.auth.uid || isFarmMemberOrOwner(resource.data.farmId));
    }

    // --- Weight records ---
    match /weightRecords/{weightId} {
      allow read: if isSignedIn() && (isAdmin() ||
        resource.data.farmerId == request.auth.uid || isFarmMemberOrOwner(resource.data.farmId));

      allow create: if isSignedIn() && (
        request.resource.data.farmerId == request.auth.uid
        && request.resource.data.farmId is string
        && isFarmMemberOrOwner(request.resource.data.farmId)
        && validTimestamps()
      );

      allow update, delete: if isSignedIn() && (isAdmin() ||
        resource.data.farmerId == request.auth.uid || isFarmMemberOrOwner(resource.data.farmId));
    }

    // --- Farm areas (colección opcional si existe además de áreas embebidas) ---
    match /farmAreas/{areaId} {
      allow read: if isSignedIn() && (isAdmin() || isFarmMemberOrOwner(resource.data.farmId));
      allow create: if isSignedIn() && request.resource.data.farmId is string && isFarmMemberOrOwner(request.resource.data.farmId) && validTimestamps();
      allow update, delete: if isSignedIn() && (isAdmin() || isFarmMemberOrOwner(resource.data.farmId));
    }

    // --- Users ---
    match /users/{userId} {
      // El usuario puede leer su propio perfil; admin puede leer todos
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());

      // Crear sólo su propio documento (p. ej., al registrarse)
      allow create: if isSignedIn() && request.auth.uid == userId && (request.resource.data.id == userId || request.resource.data.id == null);

      // Actualizar solo su propio documento, o admin
      allow update: if isSignedIn() && (request.auth.uid == userId || isAdmin());

  // Permitir borrado de su propio documento o por admin
  allow delete: if isSignedIn() && (request.auth.uid == userId || isAdmin());
    }

    // Denegar todo lo demás por defecto
    match /{document=**} { allow read, write: if false; }
  }
}
